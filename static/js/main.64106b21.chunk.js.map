{"version":3,"sources":["stores/lib/processor.ts","stores/lib/input.ts","stores/lib/calculator.ts","stores/dentaku.ts","stores/index.ts","component/Dentaku.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["operations","lhs","rhs","BigNumber","plus","toString","minus","times","dividedBy","nil","Error","transitions","EMPTY","putNumber","reg","num","a","state","putOperator","op","putEqual","ONE_NUM","ONE_OP","b","TWO_NUM","ANSWER","NEXT_NUM","String","addDigit","digit","length","newCalculator","input","calc","processor","slice","createSlice","name","initialState","calculator","reducers","action","payload","period","includes","negate","charAt","backspace","test","clearEntry","operator","equal","clear","actions","reducer","combineReducers","dentaku","dentakuReducer","store","configureStore","useSelector","rawUseSelector","Dentaku","dispatch","useDispatch","answer","className","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.64106b21.chunk.js","sourcesContent":["import { BigNumber } from 'bignumber.js';\n\nexport type Operator = '+' | '-' | '*' | '/' | 'nil';\n\nexport type State = 'EMPTY' | 'ONE_NUM' | 'ONE_OP' | 'TWO_NUM' | 'ANSWER' | 'NEXT_NUM';\n\nexport type Register = {\n  a: string;\n  b: string;\n  op: Operator;\n  state: State;\n};\n\ntype Operation = (lhs: string, rhs: string) => string;\n\nconst operations: { [op in Operator]: Operation } = {\n  '+': (lhs, rhs) => new BigNumber(lhs).plus(rhs).toString(10),\n  '-': (lhs, rhs) => new BigNumber(lhs).minus(rhs).toString(10),\n  '*': (lhs, rhs) => new BigNumber(lhs).times(rhs).toString(10),\n  '/': (lhs, rhs) => new BigNumber(lhs).dividedBy(rhs).toString(10),\n  nil: () => {\n    throw new Error('no operator');\n  },\n};\n\ntype Transition = {\n  putNumber: (reg: Register, num: string) => Register;\n  putOperator: (reg: Register, op: Operator) => Register;\n  putEqual: (reg: Register) => Register;\n};\n\nconst transitions: { [state in State]: Transition } = {\n  EMPTY: {\n    putNumber: (reg, num) => ({ ...reg, a: num, state: 'ONE_NUM' }),\n    putOperator: (reg, op) => ({ ...reg, op, state: 'ONE_OP' }),\n    putEqual: (reg) => ({ ...reg, state: 'ANSWER' }),\n  },\n  ONE_NUM: {\n    putNumber: () => {\n      throw new Error('unexpected trigger <Number> in <ONE_NUM> state');\n    },\n    putOperator: (reg, op) => ({ ...reg, op, state: 'ONE_OP' }),\n    putEqual: (reg) => ({ ...reg, state: 'ANSWER' }),\n  },\n  ONE_OP: {\n    putNumber: (reg, num) => ({ ...reg, b: num, state: 'TWO_NUM' }),\n    putOperator: (reg, op) => ({ ...reg, op, state: 'ONE_OP' }),\n    putEqual: (reg) => ({ ...reg, a: operations[reg.op](reg.a, reg.a), state: 'ANSWER' }),\n  },\n  TWO_NUM: {\n    putNumber: () => {\n      throw new Error('unexpected trigger <Number> in <TWO_NUM> state');\n    },\n    putOperator: (reg, op) => ({ ...reg, a: operations[reg.op](reg.a, reg.b), op, state: 'ONE_OP' }),\n    putEqual: (reg) => ({ ...reg, a: operations[reg.op](reg.a, reg.b), state: 'ANSWER' }),\n  },\n  ANSWER: {\n    putNumber: (reg, num) => ({ ...reg, a: num, state: 'NEXT_NUM' }),\n    putOperator: (reg, op) => ({ ...reg, op, state: 'ONE_OP' }),\n    putEqual: (reg) => ({ ...reg, a: operations[reg.op](reg.a, reg.b), state: 'ANSWER' }),\n  },\n  NEXT_NUM: {\n    putNumber: () => {\n      throw new Error('unexpected trigger <Number> in <NEXT_NUM> state');\n    },\n    putOperator: (reg, op) => ({ ...reg, op, state: 'ONE_OP' }),\n    putEqual: (reg) => ({ ...reg, a: operations[reg.op](reg.a, reg.b), state: 'ANSWER' }),\n  },\n};\n\nexport const newRegister = (): Register => {\n  return { a: '0', b: '0', op: 'nil', state: 'EMPTY' };\n};\n\nexport const putNumber = (reg: Register, num: string | number): Register => {\n  return transitions[reg.state].putNumber(reg, String(num));\n};\n\nexport const putOperator = (reg: Register, op: Operator): Register => {\n  return transitions[reg.state].putOperator(reg, op);\n};\n\nexport const putEqual = (reg: Register): Register => {\n  return transitions[reg.state].putEqual(reg);\n};\n","export type Digit = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;\n\nexport const addDigit = (num: string, digit: Digit): string => {\n  return num.length === 0 ? String(digit) : num === '0' ? String(digit) : num + digit;\n};\n\nexport const addPeriod = (num: string): string => {\n  return num.length === 0 ? '0.' : num.includes('.') ? num : num + '.';\n};\n\nexport const removeTail = (num: string): string => {\n  return num.length === 0 ? '' : /^-\\d$/.test(num) ? '0' : num.slice(0, -1) || '0';\n};\n\nexport const negate = (num: string): string => {\n  return num.length === 0 ? '' : num === '0' ? '0' : num.charAt(0) === '-' ? num.slice(1) : '-' + num;\n};\n","import * as processor from './processor';\nimport * as input from './input';\n\nexport type Calculator = processor.Register & {\n  input: string;\n};\n\nexport const newCalculator = (): Calculator => {\n  return { ...processor.newRegister(), input: '' };\n};\n\nexport const addDigit = (calc: Calculator, digit: input.Digit): Calculator => {\n  return { ...calc, input: input.addDigit(calc.input, digit) };\n};\n\nexport const addPeriod = (calc: Calculator): Calculator => {\n  return { ...calc, input: input.addPeriod(calc.input) };\n};\n\nexport const removeTail = (calc: Calculator): Calculator => {\n  return { ...calc, input: input.removeTail(calc.input) };\n};\n\nexport const negate = (calc: Calculator): Calculator => {\n  return { ...calc, input: input.negate(calc.input) };\n};\n\nexport const clearEntry = (calc: Calculator): Calculator => {\n  return { ...calc, input: '' };\n};\n\nexport const putOperator = (calc: Calculator, op: processor.Operator): Calculator => {\n  if (calc.input !== '') {\n    calc = { ...processor.putNumber(calc, calc.input), input: '' };\n  }\n  return { ...processor.putOperator(calc, op), input: '' };\n};\n\nexport const putEqual = (calc: Calculator): Calculator => {\n  if (calc.input !== '') {\n    calc = { ...processor.putNumber(calc, calc.input), input: '' };\n  }\n  return { ...processor.putEqual(calc), input: '' };\n};\n","import { createSlice } from '@reduxjs/toolkit';\nimport * as calculator from './lib/calculator';\n\nconst slice = createSlice({\n  name: 'dentaku',\n  initialState: calculator.newCalculator(),\n  reducers: {\n    digit: (state, action) => {\n      return calculator.addDigit(state, action.payload);\n    },\n    period: (state) => {\n      return calculator.addPeriod(state);\n    },\n    negate: (state) => {\n      return calculator.negate(state);\n    },\n    backspace: (state) => {\n      return calculator.removeTail(state);\n    },\n    clearEntry: (state) => {\n      return calculator.clearEntry(state);\n    },\n    operator: (state, action) => {\n      return calculator.putOperator(state, action.payload);\n    },\n    equal: (state) => {\n      return calculator.putEqual(state);\n    },\n    clear: (state) => {\n      return calculator.newCalculator();\n    },\n  },\n});\n\nexport const { digit, period, backspace, negate, clearEntry, operator, equal, clear } = slice.actions;\n\nexport default slice.reducer;\n","import { combineReducers } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { useSelector as rawUseSelector, TypedUseSelectorHook } from 'react-redux';\n\nimport dentakuReducer from './dentaku';\n\nconst reducer = combineReducers({\n  dentaku: dentakuReducer,\n});\n\nconst store = configureStore({ reducer });\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport const useSelector: TypedUseSelectorHook<RootState> = rawUseSelector;\n\nexport default store;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from '../stores';\nimport { digit, period, backspace, operator, negate, equal, clearEntry, clear } from '../stores/dentaku';\nimport './Dentaku.css';\n\nconst Dentaku = () => {\n  const dispatch = useDispatch();\n  const answer = useSelector((state) => state.dentaku.a);\n  const input = useSelector((state) => state.dentaku.input);\n\n  return (\n    <div className=\"frame\">\n      <div className=\"display\">{input === '' ? answer : input}</div>\n\n      <button onClick={() => dispatch(clearEntry())}>CE</button>\n      <button onClick={() => dispatch(clear())}>C</button>\n      <button onClick={() => dispatch(backspace())}>&larr;</button>\n      <button onClick={() => dispatch(operator('/'))}>&divide;</button>\n\n      <button onClick={() => dispatch(digit(7))}>7</button>\n      <button onClick={() => dispatch(digit(8))}>8</button>\n      <button onClick={() => dispatch(digit(9))}>9</button>\n      <button onClick={() => dispatch(operator('*'))}>&times;</button>\n\n      <button onClick={() => dispatch(digit(4))}>4</button>\n      <button onClick={() => dispatch(digit(5))}>5</button>\n      <button onClick={() => dispatch(digit(6))}>6</button>\n      <button onClick={() => dispatch(operator('-'))}>-</button>\n\n      <button onClick={() => dispatch(digit(1))}>1</button>\n      <button onClick={() => dispatch(digit(2))}>2</button>\n      <button onClick={() => dispatch(digit(3))}>3</button>\n      <button onClick={() => dispatch(operator('+'))}>+</button>\n\n      <button onClick={() => dispatch(negate())}>&plusmn;</button>\n      <button onClick={() => dispatch(digit(0))}>0</button>\n      <button onClick={() => dispatch(period())}>.</button>\n      <button onClick={() => dispatch(equal())}>=</button>\n    </div>\n  );\n};\n\nexport default Dentaku;\n","import React from 'react';\nimport Dentaku from './component/Dentaku';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dentaku />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './stores';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}